// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package marionette

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MarionetteClient is the client API for Marionette service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarionetteClient interface {
	Changes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ChangesResponse, error)
	Diff(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DiffResponse, error)
	Prepare(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Unzip(ctx context.Context, in *UnzipRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type marionetteClient struct {
	cc grpc.ClientConnInterface
}

func NewMarionetteClient(cc grpc.ClientConnInterface) MarionetteClient {
	return &marionetteClient{cc}
}

func (c *marionetteClient) Changes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ChangesResponse, error) {
	out := new(ChangesResponse)
	err := c.cc.Invoke(ctx, "/marionette.Marionette/Changes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marionetteClient) Diff(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DiffResponse, error) {
	out := new(DiffResponse)
	err := c.cc.Invoke(ctx, "/marionette.Marionette/Diff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marionetteClient) Prepare(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/marionette.Marionette/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marionetteClient) Unzip(ctx context.Context, in *UnzipRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/marionette.Marionette/Unzip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarionetteServer is the server API for Marionette service.
// All implementations must embed UnimplementedMarionetteServer
// for forward compatibility
type MarionetteServer interface {
	Changes(context.Context, *empty.Empty) (*ChangesResponse, error)
	Diff(context.Context, *empty.Empty) (*DiffResponse, error)
	Prepare(context.Context, *empty.Empty) (*empty.Empty, error)
	Unzip(context.Context, *UnzipRequest) (*empty.Empty, error)
	mustEmbedUnimplementedMarionetteServer()
}

// UnimplementedMarionetteServer must be embedded to have forward compatible implementations.
type UnimplementedMarionetteServer struct {
}

func (UnimplementedMarionetteServer) Changes(context.Context, *empty.Empty) (*ChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Changes not implemented")
}
func (UnimplementedMarionetteServer) Diff(context.Context, *empty.Empty) (*DiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Diff not implemented")
}
func (UnimplementedMarionetteServer) Prepare(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedMarionetteServer) Unzip(context.Context, *UnzipRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unzip not implemented")
}
func (UnimplementedMarionetteServer) mustEmbedUnimplementedMarionetteServer() {}

// UnsafeMarionetteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarionetteServer will
// result in compilation errors.
type UnsafeMarionetteServer interface {
	mustEmbedUnimplementedMarionetteServer()
}

func RegisterMarionetteServer(s grpc.ServiceRegistrar, srv MarionetteServer) {
	s.RegisterService(&_Marionette_serviceDesc, srv)
}

func _Marionette_Changes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarionetteServer).Changes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marionette.Marionette/Changes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarionetteServer).Changes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marionette_Diff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarionetteServer).Diff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marionette.Marionette/Diff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarionetteServer).Diff(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marionette_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarionetteServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marionette.Marionette/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarionetteServer).Prepare(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marionette_Unzip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnzipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarionetteServer).Unzip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marionette.Marionette/Unzip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarionetteServer).Unzip(ctx, req.(*UnzipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Marionette_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marionette.Marionette",
	HandlerType: (*MarionetteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Changes",
			Handler:    _Marionette_Changes_Handler,
		},
		{
			MethodName: "Diff",
			Handler:    _Marionette_Diff_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Marionette_Prepare_Handler,
		},
		{
			MethodName: "Unzip",
			Handler:    _Marionette_Unzip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marionette.proto",
}
